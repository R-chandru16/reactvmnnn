import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormValidatorType } from './FormValidator';
import { FormProps } from './interfaces/FormProps';
/**
 * @hidden
 */
export interface KeyValue<ValueType> {
    [name: string]: ValueType;
}
/**
 * Represents the [KendoReact Form component]({% slug overview_form %}).
 *
 * @example
 * ```jsx
 * export const FormInput = (fieldRenderProps) => {
 *     const onValueChange = React.useCallback(
 *         (event) => fieldRenderProps.onChange(event.target.value),
 *         [fieldRenderProps.onChange]
 *     );
 *     return (
 *         <input
 *             className={'k-textbox'}
 *             value={fieldRenderProps.value}
 *             onChange={onValueChange}
 *         />
 *     );
 * };
 *
 * export const App = () => {
 *     const handleSubmit = (dataItem) => alert(JSON.stringify(dataItem));
 *     return (
 *         <Form
 *             initialValues={{title: ''}}
 *             onSubmit={handleSubmit}
 *             render={(formRenderProps) => (
 *                 <div>
 *                     <Field name={'title'} component={FormInput} />
 *                     <button
 *                         className="k-button"
 *                         disabled={!formRenderProps.allowSubmit}
 *                         onClick={formRenderProps.onSubmit}
 *                     >
 *                         Submit
 *                     </button>
 *                 </div>
 *             )}
 *         />
 *     );
 * };
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare class Form extends React.Component<FormProps, {}> {
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        initialValues: PropTypes.Requireable<any>;
        onSubmit: PropTypes.Validator<(...args: any[]) => any>;
        render: PropTypes.Validator<(...args: any[]) => any>;
    };
    private _id;
    private _touched;
    private _visited;
    private _modified;
    private _validatorsByField;
    private _values;
    private _fields;
    /**
     * @hidden
     */
    /**
    * @hidden
    */
    touched: KeyValue<boolean>;
    /**
     * @hidden
     */
    /**
    * @hidden
    */
    visited: KeyValue<boolean>;
    /**
     * @hidden
     */
    /**
    * @hidden
    */
    modified: KeyValue<boolean>;
    /**
     * @hidden
     */
    /**
    * @hidden
    */
    validatorsByField: KeyValue<any>;
    /**
     * @hidden
     */
    /**
    * @hidden
    */
    values: KeyValue<any>;
    /**
     * @hidden
     */
    readonly fields: string[];
    /**
     * @hidden
     */
    readonly errors: KeyValue<any>;
    /**
     * @hidden
     */
    constructor(props: FormProps);
    /**
     * @hidden
     */
    resetForm: () => void;
    /**
     * @hidden
     */
    addField: (field: string) => void;
    /**
     * @hidden
     */
    handleSubmit: (event: React.SyntheticEvent<any, Event>) => void;
    /**
     * @hidden
     */
    handleChange: (name: string, value: any) => void;
    /**
     * @hidden
     */
    onFocus: (name: string) => void;
    /**
     * @hidden
     */
    onBlur: (name: string) => void;
    /**
     * @hidden
     */
    onFieldRegister: (name: string, validator: FormValidatorType | FormValidatorType[]) => () => void;
    /**
     * @hidden
     */
    isFormValid: (errors: KeyValue<any>, fields: string[]) => boolean;
    /**
     * @hidden
     */
    isFormModified: (modified: KeyValue<boolean>, fields: string[]) => boolean;
    /**
     * @hidden
     */
    isFormHasNotTouched: (touched: KeyValue<boolean>, fields: string[]) => boolean;
    /**
     * @hidden
     */
    isFormTouched: (touched: KeyValue<boolean>, fields: string[]) => boolean;
    /**
     * @hidden
     */
    isFormVisited: (visited: KeyValue<boolean>, fields: string[]) => boolean;
    /**
     * @hidden
     */
    valueGetter: (fieldName: string) => any;
    /**
     * @hidden
     */
    valueSetter: (fieldName: string, value: any) => any;
    /**
     * @hidden
     */
    render(): JSX.Element;
}
